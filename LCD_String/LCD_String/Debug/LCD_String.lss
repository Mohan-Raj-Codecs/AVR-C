
LCD_String.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000919  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060f  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000392  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000364  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  7a:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
 
#define lcdport PORTB//PORTB as LCDport

void lcd_cmd(unsigned char cmd)
{
	lcdport =cmd;
  82:	88 bb       	out	0x18, r24	; 24
	rs_low;
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
	en_high;
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e8       	ldi	r24, 0x8F	; 143
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <lcd_cmd+0x18>
  9a:	00 00       	nop
	_delay_ms(1);
	en_low;
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <lcd_data>:
}
 
void lcd_data(unsigned char data)
{
	lcdport =data;
  a4:	88 bb       	out	0x18, r24	; 24
	rs_high;
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8b bb       	out	0x1b, r24	; 27
	en_high;
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	8f e8       	ldi	r24, 0x8F	; 143
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_data+0x12>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_data+0x18>
  bc:	00 00       	nop
	_delay_ms(1);
	en_low;
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <lcd_int>:
}
 
void lcd_int()
{
	lcd_cmd(0x38);//2 lines 5x7 matrix
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_int+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_int+0x10>
  d6:	00 00       	nop
	_delay_ms(5);
	//lcd_cmd(0x02);//Return home
	//_delay_ms(5);
	lcd_cmd(0x01);//Clearing screen
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_int+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_int+0x22>
  e8:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x0c);//Display on ,cursor off
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  f0:	8f ec       	ldi	r24, 0xCF	; 207
  f2:	97 e0       	ldi	r25, 0x07	; 7
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_int+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_int+0x34>
  fa:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x06);//Incrementing cursor
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 102:	8f ec       	ldi	r24, 0xCF	; 207
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_int+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_int+0x46>
 10c:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x80);//Force cursor begin 1st line
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 114:	8f ec       	ldi	r24, 0xCF	; 207
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_int+0x52>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_int+0x58>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <cursorpos>:
	_delay_ms(5);
}
 
void cursorpos(char x, char y)
{
	if((x<1 || x>2) || (y<1 || y>16))
 122:	9f ef       	ldi	r25, 0xFF	; 255
 124:	98 0f       	add	r25, r24
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	28 f4       	brcc	.+10     	; 0x134 <cursorpos+0x12>
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	96 0f       	add	r25, r22
 12e:	90 31       	cpi	r25, 0x10	; 16
 130:	20 f4       	brcc	.+8      	; 0x13a <cursorpos+0x18>
 132:	05 c0       	rjmp	.+10     	; 0x13e <cursorpos+0x1c>
	{
		x=1;
		y=1;
 134:	61 e0       	ldi	r22, 0x01	; 1
 
void cursorpos(char x, char y)
{
	if((x<1 || x>2) || (y<1 || y>16))
	{
		x=1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <cursorpos+0x1c>
		y=1;
 13a:	61 e0       	ldi	r22, 0x01	; 1
 
void cursorpos(char x, char y)
{
	if((x<1 || x>2) || (y<1 || y>16))
	{
		x=1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
		y=1;
	}
	if(x==1)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	29 f4       	brne	.+10     	; 0x14c <cursorpos+0x2a>
	{
		lcd_cmd(0x80+y);//Cursor force to start from 1st row
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	86 0f       	add	r24, r22
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 14a:	08 95       	ret
	}
	else
	{
		lcd_cmd(0xc0+y);//Cursor force to start from 2nd row
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	86 0f       	add	r24, r22
 150:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 154:	08 95       	ret

00000156 <lcd_out>:
	}
}
 
void lcd_out(char a, char b, char *str)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ea 01       	movw	r28, r20
 
	cursorpos(a,b);
 15c:	0e 94 91 00 	call	0x122	; 0x122 <cursorpos>
	while(*str)
 160:	03 c0       	rjmp	.+6      	; 0x168 <lcd_out+0x12>
	{
 
		lcd_data(*str);
 162:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		str++;
 166:	21 96       	adiw	r28, 0x01	; 1
 
void lcd_out(char a, char b, char *str)
{
 
	cursorpos(a,b);
	while(*str)
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	fa cf       	rjmp	.-12     	; 0x162 <lcd_out+0xc>
	{
 
		lcd_data(*str);
		str++;
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <main>:
 
 
int main(void)
{
   DDRB = 0xff;//Set the data direction register DDRB as output
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	87 bb       	out	0x17, r24	; 23
   DDRA |=(1<<0);//Set the Data direction Register port d pin 0as output
 178:	8a b3       	in	r24, 0x1a	; 26
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	8a bb       	out	0x1a, r24	; 26
   DDRA |=(1<<1);//Set the Data direction Register port d pin 1as output
 17e:	8a b3       	in	r24, 0x1a	; 26
 180:	82 60       	ori	r24, 0x02	; 2
 182:	8a bb       	out	0x1a, r24	; 26
   lcd_int();//Initialize the LCD
 184:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_int>
   lcd_out(1,1,"skill-lync");
 188:	40 e6       	ldi	r20, 0x60	; 96
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_out>
   lcd_out(2,2,"Hellooooooo");
 194:	4b e6       	ldi	r20, 0x6B	; 107
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_out>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
