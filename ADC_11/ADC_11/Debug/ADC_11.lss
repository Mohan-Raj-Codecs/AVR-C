
ADC_11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e1  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bd  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000109d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 16000000L 
#include <util/delay.h>

int main(void)
{
	DDRC |= 0X80;
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	84 bb       	out	0x14, r24	; 20
	ADCSRA &= (1<<ADEN);
  72:	86 b1       	in	r24, 0x06	; 6
  74:	80 78       	andi	r24, 0x80	; 128
  76:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0X00;
  78:	17 b8       	out	0x07, r1	; 7
	SFIOR &= (1<<ACME);
  7a:	80 b7       	in	r24, 0x30	; 48
  7c:	88 70       	andi	r24, 0x08	; 8
  7e:	80 bf       	out	0x30, r24	; 48
	ACSR = 0X00;
  80:	18 b8       	out	0x08, r1	; 8
	
    /* Replace with your application code */
    while (1) 
    {
		if(ACSR&  (1<<ACO))
  82:	45 9b       	sbis	0x08, 5	; 8
  84:	03 c0       	rjmp	.+6      	; 0x8c <main+0x20>
		PORTC = 0x80;
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	85 bb       	out	0x15, r24	; 21
  8a:	fb cf       	rjmp	.-10     	; 0x82 <main+0x16>
		else
		PORTC = 0x00;
  8c:	15 ba       	out	0x15, r1	; 21
  8e:	f9 cf       	rjmp	.-14     	; 0x82 <main+0x16>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
