
Voteee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00000314  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c75  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  00001786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000613  00000000  00000000  0000205a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000266d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 30       	cpi	r26, 0x0C	; 12
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  7a:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:

#define lcdport PORTB//PORTB as LCDport

void lcd_cmd(unsigned char cmd)
{
	lcdport =cmd;
  82:	88 bb       	out	0x18, r24	; 24
	rs_low;
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8b bb       	out	0x1b, r24	; 27
	en_high;
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e8       	ldi	r24, 0x8F	; 143
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_cmd+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <lcd_cmd+0x18>
  9a:	00 00       	nop
	_delay_ms(1);
	en_low;
  9c:	8b b3       	in	r24, 0x1b	; 27
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret

000000a4 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	lcdport =data;
  a4:	88 bb       	out	0x18, r24	; 24
	rs_high;
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8b bb       	out	0x1b, r24	; 27
	en_high;
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	8f e8       	ldi	r24, 0x8F	; 143
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_data+0x12>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcd_data+0x18>
  bc:	00 00       	nop
	_delay_ms(1);
	en_low;
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret

000000c6 <lcd_int>:
}

void lcd_int()
{
	lcd_cmd(0x38);//2 lines 5x7 matrix
  c6:	88 e3       	ldi	r24, 0x38	; 56
  c8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_int+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_int+0x10>
  d6:	00 00       	nop
	_delay_ms(5);
	//lcd_cmd(0x02);//Return home
	//_delay_ms(5);
	lcd_cmd(0x01);//Clearing screen
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_int+0x1c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_int+0x22>
  e8:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x0c);//Display on ,cursor off
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  f0:	8f ec       	ldi	r24, 0xCF	; 207
  f2:	97 e0       	ldi	r25, 0x07	; 7
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_int+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_int+0x34>
  fa:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x06);//Incrementing cursor
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 102:	8f ec       	ldi	r24, 0xCF	; 207
 104:	97 e0       	ldi	r25, 0x07	; 7
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_int+0x40>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_int+0x46>
 10c:	00 00       	nop
	_delay_ms(5);
	lcd_cmd(0x80);//Force cursor begin 1st line
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 114:	8f ec       	ldi	r24, 0xCF	; 207
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_int+0x52>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_int+0x58>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <cursorpos>:
	_delay_ms(5);
}

void cursorpos(char x, char y)
{
	if((x<1 || x>2) || (y<1 || y>16))
 122:	9f ef       	ldi	r25, 0xFF	; 255
 124:	98 0f       	add	r25, r24
 126:	92 30       	cpi	r25, 0x02	; 2
 128:	28 f4       	brcc	.+10     	; 0x134 <cursorpos+0x12>
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	96 0f       	add	r25, r22
 12e:	90 31       	cpi	r25, 0x10	; 16
 130:	20 f4       	brcc	.+8      	; 0x13a <cursorpos+0x18>
 132:	05 c0       	rjmp	.+10     	; 0x13e <cursorpos+0x1c>
	{
		x=1;
		y=1;
 134:	61 e0       	ldi	r22, 0x01	; 1

void cursorpos(char x, char y)
{
	if((x<1 || x>2) || (y<1 || y>16))
	{
		x=1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <cursorpos+0x1c>
		y=1;
 13a:	61 e0       	ldi	r22, 0x01	; 1

void cursorpos(char x, char y)
{
	if((x<1 || x>2) || (y<1 || y>16))
	{
		x=1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
		y=1;
	}
	if(x==1)
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	29 f4       	brne	.+10     	; 0x14c <cursorpos+0x2a>
	{
		lcd_cmd(0x80+y);//Cursor force to start from 1st row
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	86 0f       	add	r24, r22
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 14a:	08 95       	ret
	}
	else
	{
		lcd_cmd(0xc0+y);//Cursor force to start from 2nd row
 14c:	80 ec       	ldi	r24, 0xC0	; 192
 14e:	86 0f       	add	r24, r22
 150:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 154:	08 95       	ret

00000156 <lcd_out>:
	}
}

void lcd_out(char a, char b, char *str)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ea 01       	movw	r28, r20
	cursorpos(a,b);
 15c:	0e 94 91 00 	call	0x122	; 0x122 <cursorpos>
	while(*str)
 160:	03 c0       	rjmp	.+6      	; 0x168 <lcd_out+0x12>
	{
		
		lcd_data(*str);
 162:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		str++;
 166:	21 96       	adiw	r28, 0x01	; 1
}

void lcd_out(char a, char b, char *str)
{
	cursorpos(a,b);
	while(*str)
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	fa cf       	rjmp	.-12     	; 0x162 <lcd_out+0xc>
	{
		
		lcd_data(*str);
		str++;
	}
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_cout>:
void lcd_cout(char a, char b, char *str)
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	18 2f       	mov	r17, r24
 17e:	06 2f       	mov	r16, r22
 180:	ea 01       	movw	r28, r20
	lcd_cmd(0x01);//clearingscren
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	cursorpos(a,b);
 188:	60 2f       	mov	r22, r16
 18a:	81 2f       	mov	r24, r17
 18c:	0e 94 91 00 	call	0x122	; 0x122 <cursorpos>
	while(*str)
 190:	03 c0       	rjmp	.+6      	; 0x198 <lcd_cout+0x24>
	{
		
		lcd_data(*str);
 192:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		str++;
 196:	21 96       	adiw	r28, 0x01	; 1
}
void lcd_cout(char a, char b, char *str)
{
	lcd_cmd(0x01);//clearingscren
	cursorpos(a,b);
	while(*str)
 198:	88 81       	ld	r24, Y
 19a:	81 11       	cpse	r24, r1
 19c:	fa cf       	rjmp	.-12     	; 0x192 <lcd_cout+0x1e>
	{
		
		lcd_data(*str);
		str++;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <main>:
	
	//Sensors Setup
	uint8_t GPCSR = 0X00;
	// -X     -Warned Voted  -Voted -X   -Person In
	// 7654   3              2      1    0
	DDRD = 0b11111100;
 1a8:	8c ef       	ldi	r24, 0xFC	; 252
 1aa:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
 1ac:	14 ba       	out	0x14, r1	; 20
	
	DDRB = 0xff;//Set the data direction register DDRB as output
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	87 bb       	out	0x17, r24	; 23
	DDRA |=(1<<0);//Set the Data direction Register port d pin 0as output
 1b2:	8a b3       	in	r24, 0x1a	; 26
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	8a bb       	out	0x1a, r24	; 26
	DDRA |=(1<<1);//Set the Data direction Register port d pin 1as output
 1b8:	8a b3       	in	r24, 0x1a	; 26
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	8a bb       	out	0x1a, r24	; 26
	lcd_int();//Initialize the LCD
 1be:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_int>
	lcd_cout(1,1,"EVM Ready!");
 1c2:	40 e6       	ldi	r20, 0x60	; 96
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>

int main(void)
{
	
	//Sensors Setup
	uint8_t GPCSR = 0X00;
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
	lcd_int();//Initialize the LCD
	lcd_cout(1,1,"EVM Ready!");
	
	while(1){
		
		if(PIND & 0X01){
 1d0:	80 9b       	sbis	0x10, 0	; 16
 1d2:	16 c0       	rjmp	.+44     	; 0x200 <main+0x58>
			lcd_cout(1,1,"Press Button");
 1d4:	4b e6       	ldi	r20, 0x6B	; 107
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
			lcd_out(2,2,"to Record Vote");
 1e0:	48 e7       	ldi	r20, 0x78	; 120
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_out>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	89 ef       	ldi	r24, 0xF9	; 249
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x4a>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x54>
 1fc:	00 00       	nop
			_delay_ms(200);
			GPCSR|=0X01;
 1fe:	c1 60       	ori	r28, 0x01	; 1
		}
		if(PIND & 0X02){
 200:	81 9b       	sbis	0x10, 1	; 16
 202:	1c c0       	rjmp	.+56     	; 0x23c <main+0x94>
			lcd_cout(1,1,"Vote Recorded");
 204:	47 e8       	ldi	r20, 0x87	; 135
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
 210:	2f ef       	ldi	r18, 0xFF	; 255
 212:	89 ef       	ldi	r24, 0xF9	; 249
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x6e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x78>
 220:	00 00       	nop
			_delay_ms(200);
			lcd_out(1,1,"Electronic Vote");
 222:	45 e9       	ldi	r20, 0x95	; 149
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_out>
			lcd_out(2,2,"Machine");
 22e:	45 ea       	ldi	r20, 0xA5	; 165
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_out>
			GPCSR=0X00;
 23a:	c0 e0       	ldi	r28, 0x00	; 0
		}
		if(GPCSR & 0x01 ){   //If entered take vote
 23c:	c0 ff       	sbrs	r28, 0
 23e:	c8 cf       	rjmp	.-112    	; 0x1d0 <main+0x28>
			if( (GPCSR & 0X04) && !(GPCSR & 0X08) ){ //Already Voted
 240:	8c 2f       	mov	r24, r28
 242:	84 70       	andi	r24, 0x04	; 4
 244:	c2 ff       	sbrs	r28, 2
 246:	10 c0       	rjmp	.+32     	; 0x268 <main+0xc0>
 248:	c3 fd       	sbrc	r28, 3
 24a:	0e c0       	rjmp	.+28     	; 0x268 <main+0xc0>
				lcd_cout(1,1,"Voted Recorded!!");
 24c:	4d ea       	ldi	r20, 0xAD	; 173
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
				lcd_out(2,2,"Please Quit!!");
 258:	4e eb       	ldi	r20, 0xBE	; 190
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	62 e0       	ldi	r22, 0x02	; 2
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_out>
				GPCSR|=0x08;
 264:	c8 60       	ori	r28, 0x08	; 8
 266:	b4 cf       	rjmp	.-152    	; 0x1d0 <main+0x28>
			}
			else if( (PINC &0x01) && !(GPCSR & (1<<2)) ){
 268:	98 9b       	sbis	0x13, 0	; 19
 26a:	13 c0       	rjmp	.+38     	; 0x292 <main+0xea>
 26c:	81 11       	cpse	r24, r1
 26e:	11 c0       	rjmp	.+34     	; 0x292 <main+0xea>
				lcd_cout(1,1,"Voted : A Party");
 270:	4c ec       	ldi	r20, 0xCC	; 204
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	83 ef       	ldi	r24, 0xF3	; 243
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0xda>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0xe4>
 28c:	00 00       	nop
				_delay_ms(400);
				GPCSR|= (1<<2);
 28e:	c4 60       	ori	r28, 0x04	; 4
 290:	9f cf       	rjmp	.-194    	; 0x1d0 <main+0x28>
			}
			else if( (PINC &0x02) && !(GPCSR & (1<<2)) ){
 292:	99 9b       	sbis	0x13, 1	; 19
 294:	13 c0       	rjmp	.+38     	; 0x2bc <main+0x114>
 296:	81 11       	cpse	r24, r1
 298:	11 c0       	rjmp	.+34     	; 0x2bc <main+0x114>
				lcd_cout(1,1,"Voted : B Party");
 29a:	4c ed       	ldi	r20, 0xDC	; 220
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	83 ef       	ldi	r24, 0xF3	; 243
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x104>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x10e>
 2b6:	00 00       	nop
				_delay_ms(400);
				GPCSR|= (1<<2);
 2b8:	c4 60       	ori	r28, 0x04	; 4
 2ba:	8a cf       	rjmp	.-236    	; 0x1d0 <main+0x28>
			}
			else if( (PINC &0x04) && !(GPCSR & (1<<2)) ){
 2bc:	9a 9b       	sbis	0x13, 2	; 19
 2be:	13 c0       	rjmp	.+38     	; 0x2e6 <main+0x13e>
 2c0:	81 11       	cpse	r24, r1
 2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <main+0x13e>
				lcd_cout(1,1,"Voted : C Party");
 2c4:	4c ee       	ldi	r20, 0xEC	; 236
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	83 ef       	ldi	r24, 0xF3	; 243
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x12e>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x138>
 2e0:	00 00       	nop
				_delay_ms(400);
				GPCSR|= (1<<2);
 2e2:	c4 60       	ori	r28, 0x04	; 4
 2e4:	75 cf       	rjmp	.-278    	; 0x1d0 <main+0x28>
			}
			else if( (PINC &0x08) && !(GPCSR & (1<<2)) ){
 2e6:	9b 9b       	sbis	0x13, 3	; 19
 2e8:	73 cf       	rjmp	.-282    	; 0x1d0 <main+0x28>
 2ea:	81 11       	cpse	r24, r1
 2ec:	71 cf       	rjmp	.-286    	; 0x1d0 <main+0x28>
				lcd_cout(1,1,"Voted : D Party");
 2ee:	4c ef       	ldi	r20, 0xFC	; 252
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_cout>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	83 ef       	ldi	r24, 0xF3	; 243
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x158>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x162>
 30a:	00 00       	nop
				_delay_ms(400);
				GPCSR|= (1<<2);
 30c:	c4 60       	ori	r28, 0x04	; 4
 30e:	60 cf       	rjmp	.-320    	; 0x1d0 <main+0x28>

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
